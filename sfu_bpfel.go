// Code generated by bpf2go; DO NOT EDIT.
//go:build (386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64) && linux

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type sfuIpRecord struct {
	ParticipantIp   uint32
	ParticipantPort uint16
	_               [2]byte
}

// loadSfu returns the embedded CollectionSpec for sfu.
func loadSfu() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_SfuBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load sfu: %w", err)
	}

	return spec, err
}

// loadSfuObjects loads sfu and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*sfuObjects
//	*sfuPrograms
//	*sfuMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadSfuObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadSfu()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// sfuSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type sfuSpecs struct {
	sfuProgramSpecs
	sfuMapSpecs
	sfuVariableSpecs
}

// sfuProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type sfuProgramSpecs struct {
	TcSfu *ebpf.ProgramSpec `ebpf:"tc_sfu"`
}

// sfuMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type sfuMapSpecs struct {
	XdpIpTcMap *ebpf.MapSpec `ebpf:"xdp_ip_tc_map"`
}

// sfuVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type sfuVariableSpecs struct {
}

// sfuObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadSfuObjects or ebpf.CollectionSpec.LoadAndAssign.
type sfuObjects struct {
	sfuPrograms
	sfuMaps
	sfuVariables
}

func (o *sfuObjects) Close() error {
	return _SfuClose(
		&o.sfuPrograms,
		&o.sfuMaps,
	)
}

// sfuMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadSfuObjects or ebpf.CollectionSpec.LoadAndAssign.
type sfuMaps struct {
	XdpIpTcMap *ebpf.Map `ebpf:"xdp_ip_tc_map"`
}

func (m *sfuMaps) Close() error {
	return _SfuClose(
		m.XdpIpTcMap,
	)
}

// sfuVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadSfuObjects or ebpf.CollectionSpec.LoadAndAssign.
type sfuVariables struct {
}

// sfuPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadSfuObjects or ebpf.CollectionSpec.LoadAndAssign.
type sfuPrograms struct {
	TcSfu *ebpf.Program `ebpf:"tc_sfu"`
}

func (p *sfuPrograms) Close() error {
	return _SfuClose(
		p.TcSfu,
	)
}

func _SfuClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed sfu_bpfel.o
var _SfuBytes []byte
